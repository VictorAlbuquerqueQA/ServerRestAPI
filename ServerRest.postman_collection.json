{
	"info": {
		"_postman_id": "4cc5672a-07bf-424e-abd1-bfc57057cf4b",
		"name": "ServerRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44732833"
	},
	"item": [
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Get Massa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.globals.set(\"userName\", pm.response.json().results[0].name.first);\r",
									"pm.globals.set(\"userEmail\", pm.response.json().results[0].email);\r",
									"pm.globals.set(\"userPassword\", pm.response.json().results[0].login.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLMassTest}}/api/",
							"host": [
								"{{baseURLMassTest}}"
							],
							"path": [
								"api",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar Usuario",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"schema\");\r",
									"pm.globals.unset(\"userName\");\r",
									"pm.globals.unset(\"userEmail\");\r",
									"pm.globals.unset(\"userPassword\");\r",
									"\r",
									"pm.globals.set(\"schema\", {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"_id\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    //\"_id\"\r",
									"  ]\r",
									"});\r",
									"\r",
									"pm.globals.set(\"\", pm.iterationData.get(\"userName\"));\r",
									"pm.globals.set(\"\", pm.iterationData.get(\"userEmail\"));\r",
									"pm.globals.set(\"\", pm.iterationData.get(\"userPassword\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"var Ajv = require('ajv'),\r",
									"ajv = new Ajv({allErrors: true, verbose: true})\r",
									"pm.test(\"Resposta segue o contrato esperado\", function(){\r",
									"    pm.expect(ajv.validate(pm.globals.get('schema'), pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;\r",
									"})\r",
									"\r",
									"pm.test(\"Resposta contém JSON válido\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"O Json é um objeto e não é vazio\", function () {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(Object.keys(jsonData).length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Validar mensagens de cadastro\", function () {\r",
									"    if (statusCode === 201) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"    } else if (statusCode === 400) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
									"        pm.expect.fail(\"No body não possui valor _id\");\r",
									"    } else {\r",
									"        pm.expect.fail(\"Código HTTP inesperado: \" + statusCode);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta está dentro do esperado\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Capturar o id\", function(){\r",
									"    pm.globals.set(\"userID\", jsonData._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.test(\"Resposta contém JSON válido\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta contém os campos de registro\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"_id\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"nome\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"password\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"administrador\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Capturar email e password\", function(){\r",
									"pm.globals.set(\"nome\", jsonData.nome);\r",
									"pm.globals.set(\"email\", jsonData.email);\r",
									"pm.globals.set(\"password\", jsonData.password);\r",
									"pm.globals.set(\"_id\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando informações do body com variáveis globais\", function () {\r",
									"    pm.expect(jsonData.nome).to.eql(pm.globals.get(\"userName\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.globals.get(\"userEmail\"));\r",
									"    pm.expect(jsonData.password).to.eql(pm.globals.get(\"userPassword\"));\r",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"userID\"));\r",
									"    console.log(\"Body validado corretamente!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta está dentro do esperado\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios/{{userID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.test(\"Resposta contém JSON válido\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Validar mensagens de update\", function () {\r",
									"    if (statusCode === 200) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");\r",
									"    } else if (statusCode === 201) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"    } else if (statusCode === 400) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
									"    } else {\r",
									"        pm.expect.fail(\"Código HTTP inesperado: \" + statusCode);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta está dentro do esperado\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios/{{userID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Usuario after Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.test(\"Resposta contém JSON válido\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Resposta contém os campos de registro\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"_id\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"nome\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"password\").that.is.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"administrador\").that.is.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Capturar email e password\", function(){\r",
									"pm.globals.set(\"nome\", jsonData.nome);\r",
									"pm.globals.set(\"email\", jsonData.email);\r",
									"pm.globals.set(\"password\", jsonData.password);\r",
									"pm.globals.set(\"_id\", jsonData._id);\r",
									"});\r",
									"\r",
									"pm.test(\"Validando informações do body com variáveis globais\", function () {\r",
									"    pm.expect(jsonData.nome).to.eql(pm.globals.get(\"userName\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.globals.get(\"userEmail\"));\r",
									"    pm.expect(jsonData.password).to.eql(pm.globals.get(\"userPassword\"));\r",
									"    pm.expect(jsonData._id).to.eql(pm.globals.get(\"userID\"));\r",
									"    console.log(\"Body validado corretamente!\");\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta está dentro do esperado\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios/{{userID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.test(\"Resposta contém JSON válido\", function () {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"pm.test(\"Validar mensagens de update\", function () {\r",
									"    if (statusCode === 200) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Registro excluído com sucesso\");\r",
									"    } else if (statusCode === 400) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Não é permitido excluir usuário com carrinho cadastrado\");\r",
									"    } else {\r",
									"        pm.expect.fail(\"Código HTTP inesperado: \" + statusCode);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta está dentro do esperado\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios/{{userID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"eval(pm.environment.get(\"statusCodeTest\"))(statusCode);\r",
									"\r",
									"pm.test(\"Validar mensagens de login\", function () {\r",
									"    if (statusCode === 200) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");\r",
									"    } else if (statusCode === 401) {\r",
									"        pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");\r",
									"\r",
									"    } else {\r",
									"        pm.expect.fail(\"Código HTTP inesperado: \" + statusCode);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Capturar o TOKEN\", function(){\r",
									"    pm.globals.set(\"userToken\", jsonData.authorization);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Produtos",
			"item": []
		}
	]
}